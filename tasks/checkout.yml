---
# Checkout tasks for rails_app

- name: Download rails application code  # noqa 401
  git:
    repo: "{{ rails_app_repo_url }}"
    dest: "{{ rails_app_repo_path }}"
    bare: true
    update: true

- name: Deploy application code
  git:
    repo: "{{ rails_app_repo_path }}"
    dest: "{{ rails_app_version_path }}"
    depth: 1
    version: "{{ rails_app_version | default('HEAD') }}"
    update: false

- name: Link database configuration
  file:
    src: "{{ rails_app_config_path_db }}"
    dest: "{{ rails_app_version_path }}/config/database.yml"
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_group }}"
    state: link

- name: Link puma configuration
  file:
    src: "{{ rails_app_config_path_puma }}"
    dest: "{{ rails_app_version_path }}/config/puma.rb"
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_group }}"
    state: link
    force: true

- name: Link shared folders
  include_tasks: link_path.yml
  loop:
    - storage
    - log
    - tmp/cache
    - tmp/pids
    - tmp/sockets

- name: Set active version
  file:
    src: "{{ rails_app_version_path }}"
    dest: "{{ rails_app_path }}"
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_group }}"
    state: link
  when: rails_app_version is defined

- name: Retrieve bundler installed gems
  shell: >
    set -o pipefail && awk '/^\s*gem/{ print $2 }' Gemfile | tr -d -c '[:alnum:]\n-_'
  args:
    chdir: "{{ rails_app_path }}"
    executable: /bin/bash
  environment:
    PATH: "{{ rubygems_path }}/bin:{{ ansible_env.PATH }}"
  register: rails_app_bundler_list
  check_mode: false
  changed_when: false
  tags: always

- name: Register installed gems
  set_fact:
    rails_app_gems: "{{ rails_app_bundler_list.stdout_lines }}"
  tags: always

- name: Add gem for connecting to database
  lineinfile:
    path: "{{ rails_app_path }}/Gemfile.local"
    regex: "gem {{ rails_app_db_to_gem[rails_app_db_adapter] | mandatory }}"
    line: "gem {{ rails_app_db_to_gem[rails_app_db_adapter] | mandatory }}"
    create: true
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_group }}"
    mode: 0644
  when: rails_app_db_to_gem[rails_app_db_adapter] not in rails_app_gems

- name: Add `puma` gem for serving the application
  lineinfile:
    path: "{{ rails_app_path }}/Gemfile.local"
    regex: "^gem 'puma'"
    line: "gem 'puma'{% if rails_app_puma is defined %}, '{{ rails_app_puma }}'{% endif %}"
    create: true
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_group }}"
    mode: 0644
  when: not "puma" in rails_app_gems

- name: Setup gem cache for bundler
  block:
    - name: Add proxy for 'https://rubygems.org'
      command: bundle config mirror.https://rubygems.org {{ rails_app_gems_cache_proxy }}
      args:
        chdir: "{{ rails_app_path }}"
      environment:
        PATH: "{{ rubygems_path }}/bin:{{ ansible_env.PATH }}"
      changed_when: false
    - name: Allow fallback if proxy cache not running
      command: bundle config mirror.https://rubygems.org.fallback_timeout 1
      args:
        chdir: "{{ rails_app_path }}"
      environment:
        PATH: "{{ rubygems_path }}/bin:{{ ansible_env.PATH }}"
      changed_when: false
  when: rails_app_gems_cache_proxy is defined

- name: Configure bundler for production
  shell: >
    bundle config path {{ rubygems_path }} && bundle config without development test
  environment:
    PATH: "{{ rubygems_path }}/bin:{{ ansible_env.PATH }}"
  changed_when: false

- name: Install required gems
  command: bundle install
  args:
    chdir: "{{ rails_app_path }}"
    creates: "{{ rails_app_path }}/Gemfile.lock"
  environment:
    PATH: "{{ rubygems_path }}/bin:{{ ansible_env.PATH }}"

- name: Run database migrations
  command: rake db:migrate
  args:
    chdir: "{{ rails_app_path }}"
  environment:
    PATH: "{{ rubygems_path }}/bin:{{ ansible_env.PATH }}"
  changed_when: false
